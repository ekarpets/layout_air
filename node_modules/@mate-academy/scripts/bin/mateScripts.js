#!/usr/bin/env node

"use strict";function t(t){return t&&"object"==typeof t&&"default"in t?t.default:t}var e=require("commander"),i=require("child_process"),s=require("fs"),o=t(s),n=t(require("path")),r=t(require("fs-extra"));const c="@mate-academy/scripts";var a="0.2.0";function l(t,e=!0){let s={stdio:"ignore"};e&&(s={stdio:"inherit",cwd:process.cwd()});const o=i.execSync(t,s);return o?o.toString():o}function p(t,e=!0){try{return l(t,e)}catch(t){process.exit(1)}}const m={shouldBindStdout:!0,cwd:process.cwd()};function h(t,e=m){const{shouldBindStdout:s=!0,cwd:o}=e;return new Promise((e,n)=>{const r={cwd:o},c=i.exec(t,r);let a="";s&&(c.stdout&&c.stdout.on("data",t=>{a+=t.toString(),console.log(t)}),c.stderr&&c.stderr.on("data",t=>{console.error(t)})),c.on("close",i=>{i>0?n(new Error(`${t}, errorCode: ${i}`)):e(a)})})}function u(t){return t.includes("package.json")}function d(t){if("test"===process.env.NODE_ENV)return!0;let e;try{const i=o.readFileSync(n.join(t,"package.json"),{encoding:"utf-8"});e=JSON.parse(i)}catch(t){e=null}return e&&e.devDependencies&&e.devDependencies["@mate-academy/scripts"]}function y(t){return"/"===t}function g(t){return Object.entries(t).filter(([,t])=>"boolean"!=typeof t||t).reduce((t,[e,i])=>`${t} --${e}${"boolean"==typeof i?"":"="+i}`,"")}var f,j,D,v,w,k;!function(t){t.None="none",t.Layout="layout",t.Javascript="javascript",t.React="react",t.ReactTypescript="reactTypescript"}(f||(f={}));class b{constructor(t){this.projectType=f.None,this.logNoImplementationWarning=()=>{console.warn(`No implementation for command ${this.constructor.name} for ${this.projectType} project`)},this[j]=this.logNoImplementationWarning,this[D]=this.logNoImplementationWarning,this[v]=this.logNoImplementationWarning,this[w]=this.logNoImplementationWarning,this[k]=this.logNoImplementationWarning,this.rootDir=t}async run(t){this.setProjectType(),await this.common(t),await this[this.projectType](t)}setProjectType(){if(this.projectType!==f.None)return;const{mateAcademy:t}=JSON.parse(r.readFileSync(n.join(this.rootDir,"package.json"),{encoding:"utf-8"}));t&&t.projectType?this.projectType=t.projectType:b.logProjectTypeWarning()}static logProjectTypeWarning(){console.warn('package.json should contain\n{\n  ...\n  "mateAcademy": {\n    "projectType": "layout" | "javascript" | "react" | "reactTypescript"\n  }\n}\n')}child(t){return new t(this.rootDir)}}j=f.None,D=f.Layout,v=f.Javascript,w=f.React,k=f.ReactTypescript;let S=(()=>{class t extends b{constructor(){super(...arguments),this.gitHooksDestinationDir=n.join(this.rootDir,"./.git/hooks"),this.layout=()=>{this.copyLayoutConfigs(),this.copyLinthtmlConfig()}}common(){this.copyCommonConfigs(),this.copyGitIgnore(),this.initGitHooks()}copyCommonConfigs(){const e=n.join(t.configsDir,"common");r.copySync(e,this.rootDir)}copyGitIgnore(){r.copySync(n.join(t.configsDir,".gitignore.template"),n.join(this.rootDir,".gitignore"))}copyLayoutConfigs(){const e=n.join(t.configsDir,"layout");r.copySync(e,this.rootDir)}copyLinthtmlConfig(){const e=n.join(this.rootDir,t.lintHtmlConfigDir,t.lintHtmlConfigFileName),i=n.join(this.rootDir,t.lintHtmlConfigFileName);r.copyFileSync(e,i)}initGitHooks(){r.readdirSync(t.gitHooksSourceDir).forEach(t=>this.initGitHook(t))}initGitHook(e){const i=n.join(t.gitHooksSourceDir,e),s=n.join(this.gitHooksDestinationDir,e);r.copySync(i,s)}}return t.lintHtmlConfigDir="node_modules/@mate-academy/linthtml-config",t.lintHtmlConfigFileName=".linthtmlrc.json",t.configsDir=n.join(__dirname,"../configs"),t.gitHooksSourceDir=n.join(t.configsDir,"git-hooks"),t})();class R{constructor(t){this.rootDir=t,this.baseOptions={"out-dir":n.join(this.rootDir,"dist")},this.source=n.join(this.rootDir,"src/index.html")}serve(){const t={...this.baseOptions,open:!0,port:8080};this.run("serve",t)}build(){this.run("build",this.baseOptions,"production")}run(t,e,i="development"){const s=g(e);l(`NODE_ENV=${i} npx parcel ${t} ${this.source} ${s}`)}}class T extends b{constructor(){super(...arguments),this.layout=t=>{const{html:e,files:i}=t;e&&T.lintHtml(i)}}common(t){const{styles:e,javascript:i,files:s}=t;e&&T.lintStyles(s),i&&T.lintJs(s)}static lintHtml(t){p("linthtml "+(t?t.join(" "):"./src/**/*.html"))}static lintStyles(t){p("stylelint "+(t?t.join(" "):"./src/**/*.css ./src/**/*.scss"))}static lintJs(t){p("eslint "+(t?t.join(" "):"./src"))}}class C{constructor(t){return this.rootDir=t,this.configPath=n.join(this.rootDir,"./backstopConfig.js"),this.dataDir=n.join(this.rootDir,"backstop_data"),this.referencesDir=n.join(this.dataDir,"bitmaps_reference"),this.testResultsDir=n.join(this.dataDir,"bitmaps_test"),this.htmlReportDir=n.join(this.dataDir,"html_report"),C.__instance||(C.__instance=this),C.__instance}test(){r.existsSync(this.configPath)&&(this.ensureReferences(),this.cleanTestResults(),C.run("test",{config:this.configPath}))}ensureReferences(){this.areReferencesExists()||this.loadReferences()}areReferencesExists(){return r.existsSync(this.referencesDir)}cleanTestResults(){r.removeSync(this.testResultsDir)}loadReferences(){r.existsSync(this.configPath)&&(this.cleanReference(),C.run("reference",{config:this.configPath}))}cleanReference(){r.removeSync(this.referencesDir)}static run(t,e){p(`backstop ${t} ${g(e)}`)}}class N extends b{constructor(){super(...arguments),this.parcel=new R(this.rootDir),this.layout=()=>{r.removeSync(n.join(this.rootDir,"dist")),this.parcel.build()}}common(){}}class x extends b{constructor(){super(...arguments),this.buildCommand=this.child(N),this.destinationDir=n.join(this.rootDir,"dist"),this.backstop=new C(this.rootDir),this.layout=async()=>{await this.buildCommand.run(),console.log("Start deploy to gh-pages\n");try{this.copyHtmlReport(),this.commitBuild(),x.ensureCanPush(),x.pushGhPagesSubtree(),console.log("Deployed to gh-pages successfully\n")}catch(t){console.log("Error during deploy to gh-pages:"),console.error(t.message)}finally{this.clean()}}}common(){}copyHtmlReport(){try{r.copySync(n.join(this.backstop.htmlReportDir),n.join(this.destinationDir,"./report/html_report"))}catch(t){console.error("Warning: No html_report")}}commitBuild(){l(`git add ${this.destinationDir} -f`,!1),l('git commit -m "make build" --no-verify',!1)}static ensureCanPush(){!function(t,e=!0){try{l(t,e)}catch(t){}}("git push --delete origin gh-pages",!1)}static pushGhPagesSubtree(){l("git subtree push --prefix dist origin gh-pages",!1)}clean(){l("git reset --soft HEAD^",!1),l("git restore --staged "+this.destinationDir,!1),r.removeSync(this.destinationDir)}}let H=(()=>{class t extends b{constructor(){super(...arguments),this.layout=async()=>{await h("npm i -D @mate-academy/scripts");const e=await r.readFile(n.join(this.rootDir,"package.json"),{encoding:"utf-8"}),i=JSON.parse(e);i.scripts=t.scripts,delete i["lint-staged"],delete i.husky,await s.promises.writeFile(n.join(this.rootDir,"package.json"),JSON.stringify({...i,...t.mateConfig.layout},null,2)),await Promise.all([t.safeRun(r.copy(n.join(this.rootDir,"config/backstop/backstopConfig.js"),n.join(this.rootDir,"backstopConfig.js"))),t.safeRun(r.remove(n.join(this.rootDir,"config"))),t.safeRun(r.remove(n.join(this.rootDir,"server.js"))),t.safeRun(r.remove(n.join(this.rootDir,".travis.yml"))),t.safeRun(r.remove(n.join(this.rootDir,"gulpfile.js"))),t.safeRun(r.remove(n.join(this.rootDir,".linthtmlrc")))]),await h("npm rm @linthtml/gulp-linthtml gulp-autoprefixer gulp-clean gulp-eslint gulp-replace-path gulp-sass gulp-sourcemaps gulp-stylelint gulp @mate-academy/browsersync-config htmllint htmllint-cli husky lint-staged rimraf @mate-academy/htmllint-config"),await h("npm i -D @linthtml/linthtml stylelint-scss @mate-academy/linthtml-config node-sass parcel"),await h("npm i")},this.javascript=()=>{},this.react=()=>{},this.reactTypescript=()=>{}}async common(t){await this[t.projectType]()}static async safeRun(t){try{await t}catch(t){console.error("Migration error",t)}return!0}}return t.scripts={init:"mate-scripts init",start:"mate-scripts start",lint:"mate-scripts lint","test:only":"mate-scripts test",build:"mate-scripts build",deploy:"mate-scripts deploy",update:"mate-scripts update",postinstall:"npm run update",test:"npm run lint && npm run test:only"},t.mateConfig={[f.None]:null,[f.Layout]:{mateAcademy:{projectType:f.Layout}},[f.Javascript]:{mateAcademy:{projectType:f.Javascript}},[f.React]:{mateAcademy:{projectType:f.React}},[f.ReactTypescript]:{mateAcademy:{projectType:f.ReactTypescript}}},t})();const _=new e.Command,$=new class{constructor(){this.rootDir=function(){let t=process.cwd(),e=o.readdirSync(t);try{for(;!u(e)||!d(t);){if(y(t))throw new Error("Command should be run inside project folder with @mate-academy/scripts as devDependency");t=n.join(t,"../"),e=o.readdirSync(t)}}catch(e){console.error(e.message),t=process.cwd()}return t}()}make(t,e,i=!1){const s=new t(i?process.cwd():this.rootDir);return e?(...t)=>{const i=t.pop(),o=e(i,...t);return s.run(o)}:()=>s.run()}};_.name("mate-scripts").version(a,"-v --version","output current version"),_.command("init").description("init linters and configs").action($.make(S)),_.command("start").description("run development server").action($.make(class extends b{constructor(){super(...arguments),this.parcel=new R(this.rootDir),this.layout=()=>{this.parcel.serve()}}common(){}})),_.command("lint [files...]").option("-s, --styles","lint styles only",!1).option("-h, --html","lint html only",!1).option("-j, --javascript","lint javascript only",!1).description("lint html, css and js files").action($.make(T,(t,e)=>{const{styles:i,html:s,javascript:o}=t,n=e&&e.length?e:null;return i||s||o?{styles:i,html:s,javascript:o,files:n}:{styles:!0,html:!0,javascript:!0,files:n}})),_.command("test").description("run tests").action($.make(class extends b{constructor(){super(...arguments),this.backstop=new C(this.rootDir),this.layout=()=>{this.backstop.test()}}common(){}})),_.command("build").description("create production ready build").action($.make(N)),_.command("deploy").description("deploy application to gh-pages").action($.make(x)),_.command("update").description("update @mate-academy/scripts").action($.make(class extends b{constructor(){super(...arguments),this.layout=()=>{},this.javascript=()=>{},this.react=()=>{},this.reactTypescript=()=>{}}async common(){const t=await h(`npm view ${c} version`);l(`npm i ${c}@${t}`),l("npx mate-scripts init")}})),_.command("migrate <type>").description("(global) migrate project to @mate-academy/scripts").action($.make(H,(t,e)=>({projectType:e}),!0)),_.parse(process.argv);
